My Language V0.2.a25a 0000000 00-00-0000
Depricated; updates deffered until Alpha
======================================

Caution: early versions will probably be about as stable as a house of cards built atop of jenga towers sitting on a card table.
Code accordingly.

FUNCTIONS
---------

as a general rule:
- a function in ALL CAPS is a binary operator, which returns it's result, or a control function, which doesn't return.
- infix symbols are binary operators as above
- prefix symbols change how the thing they are attatched to is interpreted
- postfix symbols change a variable in place
- a function in lowercase needs it's arguments in (parenthases), and has it's return specified
- a symbol is a binary operator or a unary operator, and returns it's result
any returned array will be 1 dimensional.

My language will have the following functions:

wait(foo) , ‚åõfoo : wait for foo milliseconds, returns void
time() : returns the current real time, timtyp
clock() : return the current program time, clktyp
beep() : print \a, returns void

IF (foo) {...} : if foo is true, do the function enclosed in {}.
ELSE {...} : if the function if fails, do the function enclosed in {}.
ELSEIF (foo) {...} : single-tier version of ELSE {IF (foo) {}}
WHILE (foo) {...} : loop the function enclosed in {} until foo is false.
UNTIL (foo) {...} : loop the function enclosed in {} until foo is true.
‚ØÉ , BREAK : immediately exit the current loop
GOTO (foo) : go to label foo. NOTE: there is no return function. putting a goto inside a function declaration can screw up your control flow.
DOTIMES (foo) ‚Äπx‚Ä∫ {...} : do whatever is in {} foo times. if foo is a float, rounds down. if foo is infinity, you're trying too hard to break things. x is the local variable name of a loop counter.
‚Üì , ||| : Do the previous line again
¬∂foo : a label called foo. Please don't put these INSIDE loops unless you know what you're doing.
NOP, NOOP, NOPR, CONTINUE, SWYM: reserved commands that do nothing. The parser eats these.
If you GOTO out of a WHILE or DOTIMES, the parser will think you are still in that loop! This does not apply to IF, ELSEIF, or ELSE.

printf(...) : print a formatted value to stdout, as in C. returns as in C. Formats as in C.
sprintf(...) : print a formatted value to variable, as in C. returns as in C. Formats as in C.
fprintf(...) : append a formatted value to file, as in C. returns as in C. Formats as in C.
scanf(...) : get a value matching format from stdin, as in C. returns as in C. Formats as in C.
sscanf(...) : get a value matching format from a char array, as in C. returns as in C. Formats as in C.
fscanf(...) : get a value matching format from file, as in C. returns as in C. Formats as in C.
fgets(...) : get a raw char array from a file, as in C. returns as in C (including \n). Formats as in C.
fputs(...) : write a char array to a file, as in C. returns as in C. Formats as in C.
fflush(...) : flush an output file, as in C. returns as in C. Formats as in C.
fopen(...) : open a file as a stream, as in C. returns as in C. Formats as in C.
fclose(...) : close a stream, as in C. returns as in C. Formats as in C.
fseek(...) : go to an offset in a file, as in C. returns as in C. Formats as in C.
ftell(...) : get the current offset in a file, as in C. returns as in C. Formats as in C.
rewind(...) : go to the beginning of a file, as in C. returns as in C. Formats as in C.

getline(foo, bar[, baz]) : get a line foo and store it in array bar. stop at optional deliminator baz.

write(foo, ...) : write the strings or variables to file foo, similar to Pascal. convert formats automaticaly.
writeln(foo, ...) : write the strings or variables to file foo and append a newline, similar to Pascal. convert formats automaticaly.
read(foo, ...) : read the next field from a file, similar to Pascal. foo is the file, subsequent arguments are variables.
readln(foo, ...) : read a line from a file and assign fields in order, similar to Pascal. foo is a file, subsequent fields are variables.

fread(...) : read raw data from a file, as in C. returns as in C.
fwrite(...) : write raw data to a file, as in C. returns as in C.

FUNCTION foo(...) {...} : define a function foo. () contains an exaustive list of the internal names of arguments, {} contains the function itself.
VARIADIC foo(bar, baz) ‚Äπx‚Ä∫ {...} : define a function foo. bar and baz are fixed arguments, {} contains the function itself, and x is the index for extra arguments.
EXTERN FOO bar(...) : define an external function that takes standard linkage. FOO is the type the function returns, using this language's names. If types are the same width, this can be used to reformat the raw data of the returned function.
TYPE FOO bar : define a basic datatype bar, from parent datatype FOO.
FOO bar, baz, quux : where FOO is a valid datatype, make variables bar, baz, and quux of that type
FOO bar[quux] {...} : make an array bar of size quux with entries of type FOO. More square brackets can be added as waldo[garply][plugh][xyzzy] to define a multi dimensional array.
STATIC FOO bar, baz, quux : where FOO is a valid datatype, make static variables bar, baz, and quux of that type
foo[bar][quux] : the quux-th element of the bar-th column of array foo
STRUCT FOO {...} : create a structured datatype FOO with the keys named in {}. Each must have it's type specified, but new fields can be added to variables later as in C.
foo.bar : the field bar from the variable foo, where foo is a structure. foo.bar is not a valid variable name otherwise because of this syntax, use foo_bar.
foo>>>bar , foo‚û§bar : structure pointer. can be chained togeather, like baz‚û§quux‚û§garply, if the field quux in baz is a pointer to another struct or similar type.
foo...bar , foo‚Ä¶bar : an array of pointers to the structure field bar from the linked list foo. all are the type of the first such field in the list.
LLIST FOO (bar) {...} : create a linked list bar of nodes with .data fields containing the values of type FOO in {}
NODE FOO bar : create a node bar with data field of valid type FOO
TREERT FOO bar : make a leaf that loops back to itself with a data field of valid type FOO.
LEAF FOO bar : create a leaf bar with data field of valid type FOO

#include "/path/to/foo" : add the entire file foo here.
#define foo bar : replace all regex foo with regex bar
and so on as in the C preprocessor

; , ‚èé , ‚Üµ : equivilant to new line
‚Üπ , ‚á• : equivilant to tab
‚ê£ , ‚çΩ : equivilant to space

‚éãfoo , EXIT FOO : close the program cleanly with status number foo
‚ö†foo , ERROR FOO : raise the signal named foo and close program
üí£ , ABORT : abort the program immidiately.
ASSERT (foo) : if foo is false, print the error information to stderr and call üí£
‚ò† , POKE5945862 : In systems with memory security, same as ‚ö†SIGSEGV. In systems WITHOUT memory security, causes a system error (such as kpanic or BSOD) intentionaly. In embedded systems, light the error indicator (assumed to be at adress 0) and HALT.

math types noted below
foo + bar : foo plus bar
foo - bar : foo minus bar
-foo : foo times -1
foo * bar , foo √ó bar : foo times bar
foo / bar , foo √∑ bar : foo over bar
foo ^ bar , foo ‚Üë bar , foo ** bar , foo ‚ãÜ bar , foo ‚òÖ bar : foo to the power of bar
foo ^^ bar , foo ‚Üë‚Üë bar : tertiation, foo raised to foo bar times
foo % bar : foo modulus bar
foo LOG bar , foo ‚çü bar , foo ‚ú™ bar : logarithem of bar to base foo
foo ROOT bar , foo ‚àö bar : foo root bar
!foo : foo factorial
¬°foo : foo derangement
foo nCr bar : combinations of foo elements from bar items
foo nPr bar : permutations of foo elements from bar items

abs(foo) , ‚ü¶foo‚üß : absolute value of number foo. returns according to mathtypes
cabs(foo) : the complex absolute value of foo.
floor(foo) , ‚åäfoo‚åã : floor of number foo, returns shortest int format possible
ceiling(foo) , ‚åàfoo‚åâ : ceiling of number foo, returns shortest int format possible
int(foo) , ÔΩ¢fooÔΩ£ : round foo to the nearest interger, returns shortest int format possible
sawtooth(foo) , ‚ù¥foo‚ùµ : fractional part of foo, returns shortest int format possible
div(foo, bar) : divide int over bar. returns divtyp.

sqrt(foo) : the square root of foo
cbrt(foo) : the cube root of foo

ln(foo) : natural logarithem of foo
lb(foo) : binary logarithem of foo
lg(foo) : common logarithem of foo

max(foo, bar...) : return the greatest value of numbers foo and bar. returns that number.
min(foo, bar...) : return the least value of numbers foo and bar. returns that number.
mean(foo, bar...) : find the adverage of numbers foo and bar. returns according to mathtypes
median(foo, bar...) : find the median of a list of values. returns according to mathtypes
mode(foo, bar...) : find the mode of a list of values. returns according to mathtypes

sin(foo) : the sine of foo, returns float
cos(foo) : the cosine of foo, returns float
tan(foo) : the tangent of foo, returns float
cot(foo) : the cotangent of foo, returns float
sec(foo) : the secant of foo, returns float
csc(foo) : the cosecant of foo, returns float

arcsin(foo) : the arcsine of foo, returns float
arccos(foo) : the arccosine of foo, returns float
arctan(foo) : the arctangent of foo, returns float
arccot(foo) : the arccotangent of foo, returns float
arcsec(foo) : the arcsecant of foo, returns float
arccsc(foo) : the arccosecant of foo, returns float

sinh(foo) : the hyperbolic sine of foo, returns float
cosh(foo) : the hyperbolic cosine of foo, returns float
tanh(foo) : the hyperbolic tangent of foo, returns float
coth(foo) : the hyperbolic cotangent of foo, returns float
sech(foo) : the hyperbolic secant of foo, returns float
csch(foo) : the hyperbolic cosecant of foo, returns float

arcsinh(foo) : the inverse hyperbolic sine of foo, returns float
arccosh(foo) : the inverse hyperbolic cosine of foo, returns float
arctanh(foo) : the inverse hyperbolic tangent of foo, returns float
arccoth(foo) : the inverse hyperbolic cotangent of foo, returns float
arcsech(foo) : the inverse hyperbolic secant of foo, returns float
arccsch(foo) : the inverse hyperbolic cosecant of foo, returns float

atan2(foo, bar) : the polar angle Œ∏ of a ray to cartesean coordinates bar,foo
erf(foo) : error function of foo, returns float.
gd(foo) : gudermannian function of foo, returns float.

sigma(foo, bar) ‚Äπn‚Ä∫ {...} : Summation. n is the local variable that contains the index, foo is the lower bound and bar is the upper bound. the function is in {}.
Œ£(foo, bar) ‚Äπn‚Ä∫ {...} : same as above

foo++ : foo + 1
foo-- : foo - 1

`foo : bitwise inverse of foo, returns result
foo ‚àß bar , foo AND bar , foo & bar : bitwise foo AND bar, returns result
foo ‚à® bar , foo OR bar , foo | bar : bitwise foo OR bar, returns result
foo ‚ç≤ bar , foo ¬• bar , foo NAND bar , foo `& bar : bitwise foo NAND bar, returns result
foo ‚äº bar , foo `‚àß bar : same as above
foo ‚ç± bar , foo NOR bar , foo `| bar : bitwise foo NOR bar, returns result
foo ‚äΩ bar , foo `‚à® bar , foo ¬• bar : same as above 
foo ‚äï bar , foo ‚äó bar , foo XOR bar , foo ‚äª bar : bitwise foo XOR bar, returns result
foo ‚äô bar , foo XNOR bar : bitwise foo XNOR bar, returns result
foo >> bar , foo ¬ª bar : barrel shift foo to the right by bar (left on big endian systems), returns result
foo << bar , foo ¬´ bar : barrel shift foo to the left by bar (right on big endian systems), returns result
foo -> bar , foo ‚Üí bar : shift foo to the right by bar, drop excess (left on big endian systems), returns result
foo <- bar , foo ‚Üê bar : shift foo to the left by bar, drop excess (right on big endian systems), returns result

¬¨foo , ~foo : logical NOT foo
=foo : logical value of foo
foo && bar : logical foo AND bar
foo || bar : logical foo OR bar
foo ~&& bar , foo ¬¨&& bar , foo !&& bar : logical foo NAND bar
foo ~|| bar , foo ¬¨|| bar , foo !|| bar : logical foo NOR bar
foo ~= bar , foo ¬¨= bar , foo != bar : logical foo XOR bar
foo ‚Üî bar , foo <> bar , foo IFF bar : logical foo XNOR bar

foo ‚àä bar , foo ELEMENT bar : test if array or linked list field pointer array bar contains element foo, returns bool result
foo ‚à™ bar , foo UNION bar : 1-dimensional union of arrays or linked list field pointer array foo and bar, returns array
foo ‚à© bar , foo INTRSECT bar : 1-dimensional intersection of arrays or linked list field pointer arrays foo and bar, returns array
foo ‚äÇ bar , foo SUBSET bar : test if array or linked list field pointer array foo is a subset of bar, returns bool result
foo ‚äñ bar , foo DIFF bar : 1 dimensional symetric difference of arrays or linked list field pointer arrays foo and bar, returns array

foo < bar , foo LT bar : test if foo is less than bar, returns bool result
foo > bar , foo GT bar : test if foo is greater than bar, returns bool result
foo ‚â§ bar , foo LE bar : test if foo is less than or equal to bar, returns bool result
foo ‚â• bar , foo GE bar : test if foo is greater than or equal to bar, returns bool result
foo ‚â† bar , foo NE bar : test if foo is not equal to bar, returns bool result
foo = bar , foo EQ bar : test if foo is equal to bar, returns bool result
foo ‚âà bar , foo APROX bar : test if floor or ceiling of foo is equal to the floor or ceiling of bar
foo ‚â° bar , foo == bar : test anything foo matches anything bar, returns bool

foo ¬¢ bar , foo CON bar : bitwise concatinate foo and bar.

strtok(foo, bar) : replace the character bar in char array foo with a null character, return pointer to current position.
regex(foo) : compile the POSIX regex foo and return the pattern
awkex(foo) : compile the Awk regex foo and return the pattern
ecmaex(foo) : compile the ECMAscript regex foo and return the pattern
match(foo, bar) : determine if foo matches expression bar, return bool. 
search(foo, bar) : match all foo in string or array of strings bar, return output as a string or an array of strings. m//
replace(foo, bar, quux) : substitute all foo for bar in quux, but return output. s///
the regular expression commands should all be UTF8 aware except strtok, which is C-compatible

rand(foo) : number between 0 and foo, returns number
roll(foo, bar) : roll <foo>d<bar>, returns sum of sides
deal(foo, bar) : deal bar sequential elements from array or linked list field pointer array foo, returns array
choose(foo) : choose 1 random element from array or linked list field pointer array foo and return it
shuffle(foo) : randomize array foo, return array.

RETURN foo : make the containing function return foo. If you need return to evaluate something, put it in () like FOR, such as RETURN (foo + bar)

lambda(foo, bar, baz) ‚Äπx, y, z‚Ä∫ {...} : do anonamous function in {} to anythings foo, bar, and baz, reffered to by local variabls x, y, and z. will iterate arrays or linked lists. multiple such items will be combined in all possible ways, eg (foo * bar * quux) times
Œª(foo, bar, baz) ‚Äπx, y, z‚Ä∫ {...} : same as above

sizeof(foo) : returns the number of bits in anything foo. sizeof(&[any variable]) should return the CPU address register size.
typeof(foo) : uses the type tree to determin the type of foo
classof(foo) : uses the type tree to determin the generalized type of foo
signof(foo) : determins the sign of foo. returns ternary for negitives, true for positives, false for 0, and NaN on error.

isnumber(foo) : uses the type tree to determin if foo is a number type. returns true for numbers, false for non numbers, ternary for number structs, and NaN for possible numbers.
isint(foo) : uses the type tree to determine if foo is an integer type. returns true or false
isnat(foo) : uses the type tree to determine if foo is an unsigned integer type. returns true or false.

sfloat(foo) : convert int foo to a float
dfloat(foo) : convert int or float foo to a double
complex(foo) : convert int, float, or double to complex
minisize(foo) : squeeze foo into the smallest type possible

tostring(foo) : convert number foo to a string
string_data(foo) , c_str(foo) : convert string foo to a char array, return pointer

stoi(*foo, **bar, baz) : convert the base baz number in string foo and store the cursor in *bar. returns c_int
stol(*foo, **bar, baz) : convert the base baz number in string foo and store the cursor in *bar. returns s_long
stoul(*foo, **bar, baz) : convert the base baz number in string foo and store the cursor in *bar. returns u_long
stoll(*foo, **bar, baz) : convert the base baz number in string foo and store the cursor in *bar. returns s_quad
stoull(*foo, **bar, baz) : convert the base baz number in string foo and store the cursor in *bar. returns u_quad
stof(*foo, **bar) : convert the number in string foo and store the cursor in *bar. returns float.
stod(*foo, **bar) : convert the number in string foo and store the cursor in *bar. returns double.

strtol(*foo, **bar, baz) : convert the base baz number in fixstr foo and store the cursor in *bar. returns s_long
strtoll(*foo, **bar, baz) : convert the base baz number in string foo and store the cursor in *bar. returns s_quad
strtoul(*foo, **bar, baz) : convert the base baz number in string foo and store the cursor in *bar. returns u_long
strtoull(*foo, **bar, baz) : convert the base baz number in string foo and store the cursor in *bar. returns u_quad
strtof(*foo, **bar) : convert the number in string foo and store the cursor in *bar. returns float.
strtod(*foo, **bar) : convert the number in string foo and store the cursor in *bar. returns double.

atof(foo) : convert string foo to a double, return it
atoi(foo) : convert string foo to a s_word, return it
atol(foo) : convert string foo to a s_long, return it
atoll(foo) : convert string foo to a s_quad, return it

toupper(foo) : convert the string or char array foo to UPPERCASE
tolower(foo) : convert the string or char array foo to lowercase
confuseables(foo) : remove all confuseables from string or char array foo, according to the official confuseables.txt

add(foo, bar, quux) : add foo to linked list bar at position quux
remove(foo, bar) : remove node bar from linked list foo

system(...) : on supported implementations, pass the command in () to an external shell. very much implementation dependent and not mandatory.
FORK {...} : spawn a child process that will do whatever is in {} and exit. avalibility is implementation dependent.
It is assumed that either both or neither of these will be provided.

malloc(foo) : allocate foo bytes
calloc(foo, bar) : allocate an array of foo elements of bar bytes
free(&foo) : erase the memory at foo
realloc(foo, bar) : resize foo to bar

moveb(foo, bar) : move 1 byte from address bar to address foo and return the value moved. foo and bar can be an interger or an & adress
movew(foo, bar) : move 2 bytes from address bar to address foo and return the value moved. foo and bar can be an interger or an & adress
movel(foo, bar) : move 4 bytes from address bar to address foo and return the value moved. foo and bar can be an interger or an & adress
zerofill(foo) : double the width of int foo by buffering it with zeros. return result. fails if sizeof(foo) is not a power of 2 greater than 8 and less than 33
signfill(foo) : double the width of int foo by buffering it with signed fill. return result. fails if sizeof(foo) is not a power of 2 greater than 8 and less than 33
swap(foo, bar) : swap foo with bar
xswap(foo, bar) : xor algorithem swap
assembly functions included for writing memory management functions that can be implementation independent.
Intended to be used with variable pointers. SEE BELOW WARNING ABOUT ABSOLUTE MEMORY ADDRESSING IN PRE-EXISTING ENVIROMENTS.

Final implementation will group non-byte datatypes into byte sized blocks.
(i.e. 4 bools will grouped together to make a byte)
(C can't do this, but this language as written, with disregard to back end, should be able to implement a compiler to do it.)

functions for transfinites, base-60 numbers, and graphics deferred.

Parseing
--------
comments, and \ have the absolute highest priority.
quotes, single or double, come next.
functions inside parenthases, normal functions(), and special bracket functions, have the highest precedance of true operators
prefix operators are evaluated inside to out. this includes unary functions, inquiries, splat, pointers, and base signs. be mindful of applying large chains of these (splat interprets anything attatched the left of it as a variable, number signs cannot be applied to strings, pointers applied to numbers are VERY DANGEROUS)
structure dots and structure pointers are evaluated next
infix mathmatical operators are next, then tests (set theory, then [in]equality, then bitwise, lastly logical);
postfix operator assignments are evaluated next to last.
assignments, extraction, and insertion are evaluated last.

If fields are seperated by commas, the fields will be resolved compleatly before moving on to the next one left to right.
functions such as return, {}, ;, newline, and control functions are evaluated differently. they control how other functions are evaluated.

Mathmatical operators follow standard order of operations.
logic and bitwise operators follow the order not, and, or, nand, nor, xor, xnor. not is actually considered a prefix or function.
Operators other than assignment-type operators (:=, :<, :>) are evaluated left to right; assignment precedent is REVERSED OF THIS.

SPECIAL VARIABLES
-----------------
stdout : the C output file
stdin : the C input file
stderr : the C error file
cout : the C++ output file
cin : the C++ input file
cerr : the C++ error file
clog : the C++ log file
ÔøΩ , NULL : a null file or bitbucket, implemented as a null pointer. (symbol is literal U+FFFD)
‚àÖ , EMPTY : the empty set. distinct from NULL.
‚Öà , imaginary_unit_i : ‚àö-1, for complex numbers. (the variable "i" is antireserved as too generic)
‚ÑØ : eulars number, double. (the variable "euler" is antireserved for i.e. user defined approximations) 
œÄ : pi, double. (The variable "pi" is antireserved for i.e. user defined approximations)
œÜ : (1+‚àö5)/2, double. (the variable "phi" is antireserved for i.e. user defined approximations. œï is antireserved for i.e. the second angle in a spherical coordinate system)
‚àû , infinity : infinity. Currently a double, may be changed to a special, more compact type for special numbers.
‚ÜØ , notanumber : quiet Not a Number. Currently a double, may be changed to a special, more compact type for special numbers.
‚ä§ , true : bool of 1
‚ä• , false : bool of 0
‚Ö° , ternary : bool of -1

formating
---------

¬ßcomment : if ¬ß occurs unescaped on a line, the rest of the line is ignored, or until ;

numbers, where foo and bar are strings of digits 1234567890, as well as aAbBcCdDeEfF for hexadecimal
foo : decimal
$foo : hexadecimal
%foo : binary
-foo : negitive signed decimal
@foo : octal
foo.bar : float
-foo.bar : negitive float

there is no syntax defined for negitive binary, hexadecimal, or octal numbers

Variable names should only consist of letters to prevent unexpected behavior.
using high adress characters may cause an increse in application size

The assignment operator is :=, as in algol or pascal
An insertion operator, :<, and extraction operator, :>, are also avalible

a Unicode alternitive for assignment is ‚âù
Unicode alternitives for insertion and extraction are ‚á¶ and ‚á®

"this is a string"
'this is also a string'

a newline, ; or ‚èé appearing before a string is closed will be interpreted as a newline,
but will cause the parser to generate a warning about the virtues of escape sequences.
a \ followed by whitespace or newline will generate a warning telling you how to properly escape an escape character.

FOR (foo) {this is a grouping}
FOR (foo)
{
this is a multiline grouping
}

FOO bar[4] {this, is, an, array}

FOO bar[2][3]
{
{this, is, a}
{2, dimensional, array}
}

FOO bar[2][2][2]
{
{
{this, is}
{an, array}
}
{
{that, contains}
{three, dimensions}
}
}

FOO bar[2][2] {{newlines, are}{not, required}}

FOO bar[2][2][2] {neither, are, subgroupings, they, are, just, for, readability}

escape character \
special character shortcuts are as in C except as noted above.

adressing and inquiring
-----------------------

&foo : the adress of foo
*foo : pointer to foo
?foo : indicates the type of foo, same as typeof(foo)
¬øfoo : indicates the recursive type of foo, same as classof(foo)
‚Ññfoo : indicates whether foo is a number, same as isnumber(foo)
¬±foo : the sign of foo, same as signof(foo)
‚Ñìfoo : the size of foo, same as sizeof(foo)
¬£foo(bar) : splat an array foo here. same as foo[0], foo[1], foo[2]...
‚Ñïfoo : test if foo is an unsigned integer type. same as isnat(foo)
‚Ñ§foo : test if foo is an interger type. same as isint(foo)

WARNING! using & or * on a decimal, hexidecimal, binary, or octal interger will read the ABSOLUTE ADDRESS.
This is an INTENDED RESPONSE, not a bug. IF YOU USE THIS ON A PRE-EXISTING OPERATING SYSTEM, ON YOUR HEAD BE IT.

DATATYPES
---------

BOOL : 2 bits <currently implementation dependent>
BYTE : 8 bits unspecified sign
WORD : 16 bits unspecified sign
LONG : 32 bits unspecified sign
QUAD : 64 bits unspecified sign
S_[BYTE|WORD|LONG|QUAD] : signed versions of above
U_[BYTE|WORD|LONG|QUAD] : unsigned versions of above
STRING : C++ style string
FIXSTR : C style *char array
C_INT : C's generic Interger datatype. here for compatibility. Width is implementation dependent.
FLOAT : single precision float
DOUBLE : double precision float
ARRAY : array of anythings, so long as all entries are the same size. can be multidimensional if rectangular/cuboid/hypercuboid.
FILE : a C-style file
INPUT : a C++-style istream
OUTPUT : a C++-style ostream
LLIST : a doubly-linked list. implemented as a collection of nodes.
NODE : a structure consisting of a pointer .prev, an anything .data, and a pointer .next
TREERT : the root of a tree of leaves.
LEAF : a structure consisting of a pointer .parent, and an anything .data
TIMTYP : a structure for holding C style real times.
CLKTYP : an number type for storing the C-style elapsed time.
DIVTYP : the result of div. a struct with fields numer and denom.
SIZTYP : the result of sizeof. an unsigned int.
TYPTYP : a structure for use in the type tree.
PATTRN : a compiled regex
VOID : a nothing 0 bits wide

"detonation" in this document refers to a fatal crash
int in this document refers to a byte, word, long, or quad (either signed or unsigned), c_int, or clktyp
number in this document refers to an int, a float, or double

assigning a negitive or overflowing number to an int will not affect it, since the format is unspecified, so long as the number is within range
assigning a negitive number to an unsigned int will detonate
assigning a number to any int that is outside the range supported by that format will detonate
assigning a value to a pointer should never fail, but may cause strange behavior

math typing: int FOO single = single, [int | single] FOO double = double
math typeing in current versions also does C-style interger promotions, and is spotty at best for parenthases functions. THIS IS A BUG (bug#0).
operations dealing with bytes SHOULD not return a word or long unless the value overflows a byte.
operations dealing in signed values SHOULD return a signed value unless the returned value is positive and too large to hold.
all math functions should return the smallest length type possible, and use this type for calculation unless architecture makes this impractical.
Strings and NOWHERE evaluate to Quiet_NaN in math fuctions.
Non-empty strings evaluate as true if taken with =foo in logic functions. =NULL evaluates as false.

While the language may be initialy written for i686 and x86_64, it was concieved for the 68020+68881.
A backport for 680x0 will be made avalible for the first system whos calling conventions can be located and demystifyed.
a barebones embedded Z80 implementation for system design is also planned

Error strings should all be converted to NULL or NaN

DEFINEING FUNCTIONS
-------------------

a function can be defined as follows:

FUNCTION foo(bar, quux)
	{
	if(bar < quux) {return bar}
	elseif(bar > quux) {return quux}
	else {return ÔøΩ}
	}

this will make a function that returns the lesser of two numbers, bar and quux.
Note there is no checking to see if bar or quux are numbers.
If bar or quux are not numbers, the function will detonate.
a function can return more than one type, hence it is not necessary to say what it's return type is like in C


EXAMPLES
--------
mandatory hello world program.
Unlike C, but like older languages and modern interpreted languages,
there is no main function required. one could define a main function
and call it at the end of the program, but this is unneccisary.
It is recommended to have things defined before you use them, however. The compiler doesn't read that far ahead.

Example 1:
printf("Hello, World!\n")

Example 2:
cout :< "Hello, World!" ¬¢ "\n"

Example 3:
writeln(cout, "Hello, World!")

Note that all examples are only 1 line of code.

Deferred fetures
----------------

full support of up-arrow notation

Transfinite number support

Base 60 math support

Complete set of complex number functions

Support for Spherical and Antispherical geometries

(Bitmap) graphics support with pixles, lines, rectangles, circles, and turtles
loading and saving a format similar to LOGO sourcecode, SVG, or macintosh quickdraw's PICT
bitmap loading, blitting & masking

Ability to output sound by frequency, note, or telephone button for a given duration.
would support sine, square, and sawtooth for note and frequency. telephone would always be duplexed sine.
Ability to load and save sound scripts

The ability to store 4 bools in a byte

Useless ability to modify constants without causing SIGSEGV

Support for Nibbles and the ability to store 2 of them in a byte

Special, compact type for ‚àû and NaN

Support for Octal pairs and the ability to store 4 of them in 3 byte groups

support for perl, lex, and Snobol4 style regexs

Support for Q8.8 and Q16.16 numbers

Support for EBCDIC-APL, MAC-OS-ROMAN, ISO-8859-1.
MAC-OS-ROMAN's apple would map to the de-facto standard U+F8FF Ô£ø on all platforms.

a true interpreter (would not replace APL transpiler, but be a third implementation)
full parody of file IO functions for APL transpiler
runtime bytecode compatibility amoungst both|all implimentations
the actual APL transpiler

cross compilation and assembly-only implementation for Z80 embedded system design

BUILDING
--------
The source for the first alpha version is projected to need:
- a POSIX shell
- a Make utility
- a C compiler
- a C++ compiler
- a C preprocessor that can be called independently
- an Assembler
- a Linker
- RE/flex
- yacc, byacc, or bison
- curl (to ensure the most current unicode files)

future rewrites may also require
- an M4 macro processor

Yes, this first alpha version is expected to be huge in size and have dozens of intermidiate object files. I expect it to get bigger, not smaller, as there is a 1:1 corraspondance between primary functions and object files.
This is because the alpha version will be only the first and second step in a bootstrapping process, and the first revision of them at that.
I do expect the final version of the bootstrapping process to gradually get smaller after the third iteration as external object files are rolled into a single file and optimized. I'm probably wrong.
The use of the C preprocessor may change in a future version.
I don't forsee needing any other languages for the commands I've included, but I can forsee complications which may arise that could call for the ones in the second list. the two lists taken together covers most of my useful programming skills. amoungst the languages that I will definately NOT be including is Cobol.
This language is designed for POSIX-compliant enviroments. Barring a signifigant change in policy by Microsoft, Windows support is unlikely to be feasible, but may be possible by extra-ordinary mesures (like compleatly reimplimenting everything about how unicode is implemented internaly).

PARSING (CONTINUED)
-------------------

a variable name and function name may not overlap

a name may not contain any technical symbol. these include:
' " ; : [ ] { } | \ < > , . ? / ~ ` ! @ # $ % ^ & * ( ) - + =
‚Äπ ‚Ä∫ ‚ü¶ ‚üß ‚åä ‚åã ‚åà ‚åâ ÔΩ¢ ÔΩ£ ‚ù¥ ‚ùµ ¬∂ ‚û§ ‚Ä¶ √ó √∑ ‚ãÜ ‚çü ‚òÖ ‚ú™ ‚àö ¬° ¬ø ‚àß ‚à® ‚ç≤ ‚ç± ‚äª ‚äΩ ‚äº
‚äï ‚äó ‚äô ‚â° ¬ª ¬´ ‚Üî ‚Üí ‚Üê ‚Üë ‚Üì ‚Üµ ¬¨ ‚àä ‚à™ ‚à© ‚äÇ ‚äñ ‚â§ ‚â• ‚â† ‚âà ¬¢ ¬• ‚âù ¬£ ‚Ññ ¬± ‚Ñì ‚Üπ ‚á•
‚á¶ ‚á® ‚èé ‚ê£ ‚çΩ ‚Ñï ‚Ñ§ ‚éã ‚ö† ‚ò† ‚ØÉ ‚åõ üí£

a name may not contain a number as the first character
0 1 2 3 4 5 6 7 8 9

a name may not overlap exactly with a special variable.
stdin stdout stderr ÔøΩ NULL ‚àÖ emptyset ‚Öà imaginary_unit_i ‚ÑØ œÄ œÜ ‚àû infinity ‚ÜØ notanumber ‚ä§ true ‚ä• false ‚Ö° ternary

a name may not overlap exactly with a builtin function
[set of all functions]

The compiler automatically generates a type tree and associated variables for each variable and type. They follow the form:
type_of_[variablename] type_table_[typename]
Be mindful of these when naming your variables, as collisions will screw up type checking
these are always structures of typtyp

a variable name may not contain an unprintable character
‚êÄ ‚êÅ ‚êÇ ‚êÉ ‚êÑ ‚êÖ ‚êÜ ‚êá ‚êà ‚êâ ‚êä ‚êã ‚êå ‚êç ‚êé ‚êè ‚êê ‚êë ‚êí ‚êì ‚êî ‚êï ‚êñ ‚êó ‚êò ‚êô ‚êö ‚êõ ‚êú ‚êù ‚êû ‚êü ‚ê† ‚ê°

forbidden symbols will NEVER include (antireserved):
_ ¬¶ ¬∑ ‚Ä¢ ‚ô† ‚ô° ‚ô¢ ‚ô£ ‚ô§ ‚ô• ‚ô¶ ‚ôß ‚ôî ‚ôï ‚ôñ ‚ôó ‚ôò ‚ôô ‚ôö ‚ôõ ‚ôú ‚ôù ‚ôû ‚ôü Àê Àë ‚´∂ [set of all unicode letters]

Tokens are seperated by "Whitespace". This does not follow the standard unicode definition of "Whitespace".
Whitespace can be specified manually at metacompilation time. By default, this includes:
‚ê† ‚êâ ‚Üπ ‚á• ‚ê£ ‚çΩ <all breaking spaces>

Lines are seperated by specially defined characters. This can be chosen, too. by default, this includes:
‚êä ‚êç ; ‚èé ‚Üµ

MAX_BUFFER is a value used in string and file operations. it defaults to 512 bytes. This is the amount of memory allocated for buffer reads.

TYPE TREE
the type tree contains the names of all types. any user defined types are automatically added to the type tree.

VERSION NUMBERS
---------------
major version : a number that represents the full version number
minor version : the number of minor revisions since the last time the version number was changed
revision : tiny revisions since last minor version
documentation version : the version of the documentation for the minor version. appears as a letter (starting at a) following the full version number when the previous documentation for the same version was errornous, ommited otherwise.
testbuild number : the sequential testbuild number
testbuild date : the date of the testbuild

format: Ver.major.minor[doc] #NUMBER DD-MM-YYYY

BUG REPORTS
-----------
Number	Reporter	version			Status		Priority
Description
{
Actions taken/planned				Result?		"IF NOT THEN"
.						[waiting]	"IF NOT THEN"
.						[waiting]	"IF NOT THEN"
.						[waiting]	"IF NOT THEN"
LAST RESORT mediocore solution			[waiting]
 -or-
HOTFIX	mediocore solution			[waiting]	"UNTIL"
LONGFIX extraodinary measures			[waiting]
}&{
Actions for next part of issue.....

bug#0	Author		0.1.10 0000000 00-00-0000	FIXED	Annoying
Placeholder for further mathtypes errors caused by unintercepted interger promotion

bug#1	Author		0.1.14 0000000 00-00-0000	Unconfirmed	CRITICAL
Placeholder for specific buffer-related memory leaks caused by input functions

bug#2	Author		0.1.17 0000000 00-00-0000	FIXED	CRITICAL
Placeholder for specific FUNCTION type/RETURN type related errors

bug#3	Author		0.1.18 0000000 00-00-0000	FIXED	CRITICAL
Placeholder for parser errors related to curly brackets, loops, and GOTO interacting in ways they shouldn't. DON'T JUST ASSUME YOUR FALL-THROUGH BOMBS GO HERE.
